/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as VocabularyServicesMockApiImport } from './routes/vocabulary/services/mockApi'
import { Route as VocabularyHooksUseVocabularyImport } from './routes/vocabulary/hooks/useVocabulary'
import { Route as VocabularyComponentsVocabularyListImport } from './routes/vocabulary/components/VocabularyList'
import { Route as VocabularyComponentsVocabularyFormImport } from './routes/vocabulary/components/VocabularyForm'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VocabularyServicesMockApiRoute = VocabularyServicesMockApiImport.update({
  id: '/vocabulary/services/mockApi',
  path: '/vocabulary/services/mockApi',
  getParentRoute: () => rootRoute,
} as any)

const VocabularyHooksUseVocabularyRoute =
  VocabularyHooksUseVocabularyImport.update({
    id: '/vocabulary/hooks/useVocabulary',
    path: '/vocabulary/hooks/useVocabulary',
    getParentRoute: () => rootRoute,
  } as any)

const VocabularyComponentsVocabularyListRoute =
  VocabularyComponentsVocabularyListImport.update({
    id: '/vocabulary/components/VocabularyList',
    path: '/vocabulary/components/VocabularyList',
    getParentRoute: () => rootRoute,
  } as any)

const VocabularyComponentsVocabularyFormRoute =
  VocabularyComponentsVocabularyFormImport.update({
    id: '/vocabulary/components/VocabularyForm',
    path: '/vocabulary/components/VocabularyForm',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/vocabulary/components/VocabularyForm': {
      id: '/vocabulary/components/VocabularyForm'
      path: '/vocabulary/components/VocabularyForm'
      fullPath: '/vocabulary/components/VocabularyForm'
      preLoaderRoute: typeof VocabularyComponentsVocabularyFormImport
      parentRoute: typeof rootRoute
    }
    '/vocabulary/components/VocabularyList': {
      id: '/vocabulary/components/VocabularyList'
      path: '/vocabulary/components/VocabularyList'
      fullPath: '/vocabulary/components/VocabularyList'
      preLoaderRoute: typeof VocabularyComponentsVocabularyListImport
      parentRoute: typeof rootRoute
    }
    '/vocabulary/hooks/useVocabulary': {
      id: '/vocabulary/hooks/useVocabulary'
      path: '/vocabulary/hooks/useVocabulary'
      fullPath: '/vocabulary/hooks/useVocabulary'
      preLoaderRoute: typeof VocabularyHooksUseVocabularyImport
      parentRoute: typeof rootRoute
    }
    '/vocabulary/services/mockApi': {
      id: '/vocabulary/services/mockApi'
      path: '/vocabulary/services/mockApi'
      fullPath: '/vocabulary/services/mockApi'
      preLoaderRoute: typeof VocabularyServicesMockApiImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/vocabulary/components/VocabularyForm': typeof VocabularyComponentsVocabularyFormRoute
  '/vocabulary/components/VocabularyList': typeof VocabularyComponentsVocabularyListRoute
  '/vocabulary/hooks/useVocabulary': typeof VocabularyHooksUseVocabularyRoute
  '/vocabulary/services/mockApi': typeof VocabularyServicesMockApiRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/vocabulary/components/VocabularyForm': typeof VocabularyComponentsVocabularyFormRoute
  '/vocabulary/components/VocabularyList': typeof VocabularyComponentsVocabularyListRoute
  '/vocabulary/hooks/useVocabulary': typeof VocabularyHooksUseVocabularyRoute
  '/vocabulary/services/mockApi': typeof VocabularyServicesMockApiRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/vocabulary/components/VocabularyForm': typeof VocabularyComponentsVocabularyFormRoute
  '/vocabulary/components/VocabularyList': typeof VocabularyComponentsVocabularyListRoute
  '/vocabulary/hooks/useVocabulary': typeof VocabularyHooksUseVocabularyRoute
  '/vocabulary/services/mockApi': typeof VocabularyServicesMockApiRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/vocabulary/components/VocabularyForm'
    | '/vocabulary/components/VocabularyList'
    | '/vocabulary/hooks/useVocabulary'
    | '/vocabulary/services/mockApi'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/vocabulary/components/VocabularyForm'
    | '/vocabulary/components/VocabularyList'
    | '/vocabulary/hooks/useVocabulary'
    | '/vocabulary/services/mockApi'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/vocabulary/components/VocabularyForm'
    | '/vocabulary/components/VocabularyList'
    | '/vocabulary/hooks/useVocabulary'
    | '/vocabulary/services/mockApi'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  VocabularyComponentsVocabularyFormRoute: typeof VocabularyComponentsVocabularyFormRoute
  VocabularyComponentsVocabularyListRoute: typeof VocabularyComponentsVocabularyListRoute
  VocabularyHooksUseVocabularyRoute: typeof VocabularyHooksUseVocabularyRoute
  VocabularyServicesMockApiRoute: typeof VocabularyServicesMockApiRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  VocabularyComponentsVocabularyFormRoute:
    VocabularyComponentsVocabularyFormRoute,
  VocabularyComponentsVocabularyListRoute:
    VocabularyComponentsVocabularyListRoute,
  VocabularyHooksUseVocabularyRoute: VocabularyHooksUseVocabularyRoute,
  VocabularyServicesMockApiRoute: VocabularyServicesMockApiRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/vocabulary/components/VocabularyForm",
        "/vocabulary/components/VocabularyList",
        "/vocabulary/hooks/useVocabulary",
        "/vocabulary/services/mockApi"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/vocabulary/components/VocabularyForm": {
      "filePath": "vocabulary/components/VocabularyForm.tsx"
    },
    "/vocabulary/components/VocabularyList": {
      "filePath": "vocabulary/components/VocabularyList.tsx"
    },
    "/vocabulary/hooks/useVocabulary": {
      "filePath": "vocabulary/hooks/useVocabulary.ts"
    },
    "/vocabulary/services/mockApi": {
      "filePath": "vocabulary/services/mockApi.ts"
    }
  }
}
ROUTE_MANIFEST_END */
